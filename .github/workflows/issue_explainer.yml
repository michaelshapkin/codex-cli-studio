# .github/workflows/issue_explainer.yml
name: Codex CLI Explain Issue

on:
  issues:
    types: [labeled]

permissions:
  issues: write
  contents: read # Keep read permission just in case checkout needs it explicitly

jobs:
  explain_code_in_issue:
    if: github.event.label.name == 'ask-cstudio-explain'
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      # --- FIX: Completely remove cache parameters ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # Or your preferred version (3.12, 3.13)
          # No 'cache' or 'cache-dependency-path' here

      - name: Install Codex CLI Studio
        run: |
          python -m pip install --upgrade pip
          # Install directly from PyPI, no local build needed here
          pip install codex-cli-studio

      # ... (Rest of the steps remain the same) ...
      - name: Extract Code Snippet from Issue Body
        id: extract_code
        run: |
          ISSUE_BODY=$(echo "${{ github.event.issue.body }}" | sed 's/\\r//g')
          CODE_SNIPPET=$(echo "$ISSUE_BODY" | awk '/^```(\w*)/{f=1;next} /^```/{f=0; exit} f{print}')
          if [[ -z "$CODE_SNIPPET" ]]; then
            echo "No code block found in issue body. Setting error message."
            echo "error_message=No fenced code block (\`\`\` ... \`\`\`) found in the issue body." >> $GITHUB_OUTPUT
            exit 0 # Gracefully exit step
          else
            echo "Code snippet extracted."
            echo "code_snippet<<EOF" >> $GITHUB_OUTPUT
            echo "$CODE_SNIPPET" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Run cstudio explain
        id: cstudio
        if: steps.extract_code.outputs.error_message == null
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TERM: dumb
          NO_COLOR: 1
        run: |
          EXPLANATION=$(cstudio explain <(echo "${{ steps.extract_code.outputs.code_snippet }}") 2>&1)
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "cstudio explain command failed with exit code $EXIT_CODE."
            echo "output<<EOF" >> $GITHUB_OUTPUT
            echo "Error running cstudio explain. Output:" >> $GITHUB_OUTPUT
            echo "$EXPLANATION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "Explanation generated."
          echo "output<<EOF" >> $GITHUB_OUTPUT
          echo "$EXPLANATION" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Comment on Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // ... (JavaScript code remains the same) ...
            const issue_number = context.issue.number;
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            let body;
            const extraction_error = `${{ steps.extract_code.outputs.error_message }}`;
            const raw_output = `${{ steps.cstudio.outputs.output }}`;
            const output_lines = raw_output.split('\n');
            const first_line = output_lines[0] || '';
            const explanation_content = (first_line.includes('Analyzing') || first_line.includes('Generating'))
                                        ? output_lines.slice(1).join('\n')
                                        : raw_output;

            if (extraction_error) {
              body = `ðŸ¤– **Codex CLI Studio:**\n\n${extraction_error}`;
            } else if (explanation_content && !explanation_content.includes('Error running cstudio explain')) {
              const formatted_explanation = explanation_content
                  .replace(/^âœ¨ Configuration File Explanation:/gm, '**Explanation:**')
                  .replace(/^âœ¨ Explanation:/gm, '**Explanation:**')
                  .trim();
              body = `ðŸ¤– **Codex CLI Studio Explanation:**\n\n---\n\n${formatted_explanation || "_(AI generated an empty explanation)_"}`;
            } else {
              body = `ðŸ¤– **Codex CLI Studio:**\n\nSorry, I couldn't generate an explanation. There might have been an API issue or an internal error executing the command.`;
              console.log("Raw output from cstudio step:", raw_output);
            }
            await github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: issue_number,
              body: body
            });